/**
 * @packageDocumentation
 * @module api.functional.api.v1.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import { Fetcher, Primitive } from '@nestia/fetcher';
import type { IConnection } from '@nestia/fetcher';

import type { FollowUserDto } from './../../../../../controllers/users.controller';

/**
 * correct case :
 *
 * @controller UsersController.follow1()
 * @path POST /api/v1/user/follow1
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function follow1(
  connection: IConnection,
  __1: Primitive<follow1.Input>,
): Promise<follow1.Output> {
  return Fetcher.fetch(
    connection,
    follow1.ENCRYPTED,
    follow1.METHOD,
    follow1.path(),
    __1,
  );
}
export namespace follow1 {
  export type Input = Primitive<FollowUserDto>;
  export type Output = Primitive<true>;

  export const METHOD = 'POST' as const;
  export const PATH: string = '/api/v1/user/follow1';
  export const ENCRYPTED: Fetcher.IEncrypted = {
    request: false,
    response: false,
  };

  export function path(): string {
    return `/api/v1/user/follow1`;
  }
}

/**
 * error case :
 * In my opinion, in POST functions where only parameters exist, the method is not deduced to POST.
 *
 * @controller UsersController.follow2()
 * @path POST /api/v1/user/:id/follow2
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function follow2(
  connection: IConnection,
  followerId: number,
): Promise<follow2.Output> {
  return Fetcher.fetch(
    connection,
    follow2.ENCRYPTED,
    follow2.METHOD,
    follow2.path(followerId),
  );
}
export namespace follow2 {
  export type Output = Primitive<true>;

  export const METHOD = 'POST' as const;
  export const PATH: string = '/api/v1/user/:id/follow2';
  export const ENCRYPTED: Fetcher.IEncrypted = {
    request: false,
    response: false,
  };

  export function path(followerId: number): string {
    return `/api/v1/user/${encodeURIComponent(followerId)}/follow2`;
  }
}

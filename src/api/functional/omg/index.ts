/**
 * @packageDocumentation
 * @module api.functional.omg
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher, Primitive } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { TryCatch } from "./../../../app.controller";

/**
 * @controller AppController.ThisFunctionHasTooLongReturnType()
 * @path GET /omg
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function ThisFunctionHasTooLongReturnType
    (
        connection: IConnection
    ): Promise<ThisFunctionHasTooLongReturnType.Output>
{
    return Fetcher.fetch
    (
        connection,
        ThisFunctionHasTooLongReturnType.ENCRYPTED,
        ThisFunctionHasTooLongReturnType.METHOD,
        ThisFunctionHasTooLongReturnType.path()
    );
}
export namespace ThisFunctionHasTooLongReturnType
{
    export type Output = Primitive<TryCatch<6, { readonly result: false; readonly code: { readonly TEST: "IS_TEST"; }; readonly data: "Error happens something1."; }>>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/omg";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/omg`;
    }
}